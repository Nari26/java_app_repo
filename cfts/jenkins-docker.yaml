AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Infrastructure Template - Creates Launch Template and Autoscaling group
Parameters:
  pAvailabilityZones:
    Description: availability zones
    Type: String
    Default: us-east-1a
  pImageId:
    Description: ec2 ami id 
    Type: String 
    Default: ami-0d5eff06f840b45e9
  pInstanceType:
    Description: ec2 instance type
    Type: String 
    Default: t2.micro
  #pKeyName:
  #  Description: ec2 key pair
  #  Type: 'AWS::EC2::KeyPair::KeyName'
  pAutomationPath:
    Description: automation path
    Type: String
    NoEcho: true
  pJenkinsPassword:
    Description: jenkins user password
    Type: String
    NoEcho: true
  pNotificationNumber:
    Description: number for sns notifications
    Type: String
    NoEcho: true

Resources:  
  rS3AccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt rRole.Arn
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3_Bucket_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action:
                  - 's3:DeleteObjectTagging'
                  - 's3:CreateBucket'  
                  - 's3:ListBucket'
                  - 's3:ListAllMyBuckets'
                  - 's3:DeleteBucketPolicy'   
                  - 's3:GetBucketPolicy'
                  - 's3:PutEncryptionConfiguration'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:PutBucketTagging'
                  - 's3:PutLifecycleConfiguration'
                  - 's3:PutBucketPolicy'
                  - 's3:PutObjectTagging'
                  - 's3:DeleteObject'
                  - 's3:DeleteBucket'
                Resource: '*'  
  rRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SNS_Bucket_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action:
                  - 'sns:List*'
                  - 'sns:Get*'
                  - 'sns:Publish'
                  - 'sns:Subscribe'
                  - 'sns:Unsubscribe'
                  - 'sns:ConfirmSubscription'
                Resource: '*'
        - PolicyName: KMS_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:UntagResource'
                  - 'kms:GenerateDataKeyPairWithoutPlaintext'
                  - 'kms:ReEncryptFrom'
                  - 'kms:TagResource'
                  - 'kms:Encrypt'
                  - 'kms:GetKeyRotationStatus'
                  - 'kms:List*'
                  - 'kms:RevokeGrant'
                  - 'kms:GenerateDataKey'
                  - 'kms:ReEncryptTo'
                  - 'kms:DescribeKey'
                  - 'kms:CreateKey'
                  - 'kms:CreateGrant'
                Resource: '*'
        - PolicyName: EC2_Access_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action:
                  - 'ec2:DetachVolume'
                  - 'ec2:AuthorizeSecurityGroupEgress'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:DetachNetworkInterface'
                  - 'ec2:TerminateInstances'
                  - 'ec2:RequestSpotInstances'
                  - 'ec2:DeleteTags'
                  - 'ec2:CreateTags'
                  - 'ec2:Describe*'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:RunInstances'
                  - 'ec2:ModifyImageAttribute'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CancelSpotInstanceRequests'
                  - 'ec2:DeleteVolume'
                  - 'ec2:CreateSecurityGroup'
                  - 'ec2:RevokeSecurityGroupEgress'
                  - 'ec2:DeleteSecurityGroup'
                  - 'ec2:ModifyInstanceAttribute'
                Resource: '*'
        - PolicyName: Route53_Access_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action:
                  - 'route53:CreateHostedZone'
                  - 'route53:DisassociateVPCFromHostedZone'
                  - 'route53:GetHostedZone'
                  - 'route53:ListHostedZones'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:CreateVPCAssociationAuthorization'
                  - 'route53:ListHostedZonesByName'
                  - 'route53:ListTagsForResource'
                  - 'route53:DeleteVPCAssociationAuthorization'
                  - 'route53:ListHostedZonesByVPC'
                  - 'route53:ListResourceRecordSets'
                  - 'route53:DeleteHostedZone'
                  - 'route53:GetHostedZoneLimit'
                  - 'route53:AssociateVPCWithHostedZone'
                  - 'route53:GetHostedZoneCount'
                  - 'route53:UpdateHostedZoneComment'
                Resource: '*'
  rInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref rRole
  rSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTP access 
      GroupName: Jenkins-SG
      SecurityGroupIngress:
      #- IpProtocol: tcp
      #  FromPort: 22
      #  ToPort: 22
      #  CidrIp: 173.95.172.65/32
      - IpProtocol: tcp
        FromPort: 8085
        ToPort: 8085
        CidrIp: 0.0.0.0/0
  rEc2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Ref pAvailabilityZones
      IamInstanceProfile: !Ref rInstanceProfile
      ImageId: !Ref pImageId
      InstanceType: !Ref pInstanceType
      #KeyName: !Ref pKeyName
      SecurityGroupIds:
        - !GetAtt rSecurityGroup.GroupId
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            sudo yum install git -y 
            sudo git clone https://github.com/${pAutomationPath}.git
            cd java_app_repo/jenkins 
            sudo chmod +x docker.sh
            sudo mkdir -p /opt/docker
            sh -x docker.sh ${pJenkinsPassword} >> /opt/docker/logs
  rSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: Jenkins-Notifications
      Subscription: 
        - Protocol: SMS
          Endpoint: !Ref pNotificationNumber
      Tags: 
        - Key: Name 
          Value: Jenkins-Notifications
